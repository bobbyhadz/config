" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" TODO: Load plugins here (pathogen or vundle)

" Screen will not re-draw while executing macros
set lazyredraw

" Displays the cursor line shadow
set cursorline

" Sets relative numbers, so you can 10j or 10k without counting lines
set relativenumber

" Turn on syntax highlighting
syntax on

" Monokai color scheme
syntax enable
colorscheme monokai

" For plugins to load correctly
filetype plugin indent on

" Set "," as leader key
nnoremap <SPACE> <Nop>
let mapleader = ","

" Security
set modelines=0

" Show line numbers
set number

" Show file stats
set ruler

" Encoding
set encoding=utf-8


"Mode Settings

let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

"Cursor settings:

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" Whitespace {{{
set wrap
set textwidth=79
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround
"}}}

" Cursor motion {{{
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
"}}}

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" Searching 
" nnoremap / /\v
" vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<cr> " clear search

" Set Ctrl + S to save the document (:w)
:nmap <c-s> :w<CR>
:imap <c-s> <Esc>:w<CR>a


" Auto close brackets {{{
" inoremap " ""<left>
" inoremap ' ''<left>
" inoremap ( ()<left>
" inoremap [ []<left>
" inoremap { {}<left>
" inoremap {<CR> {<CR>}<ESC>O
" inoremap {;<CR> {<CR>};<ESC>O


" Set jk to exit command mode
cnoremap jk <c-c>
"}}} 


" insert mode maps {{{

" Remap jk to <Esc> in insert mode
inoremap jk <Esc>
inoremap <leader>jk ,<Esc>

inoremap jl <Esc>la
inoremap jh <Esc>i
inoremap jj <Esc>A
inoremap jx <Esc>lxi
inoremap jk <Esc>
inoremap jn <Esc>o
inoremap <leader>dd <Esc>ddi
inoremap <leader>> <esc>>>a
inoremap <leader>< <esc><<a

"auto close tag
inoremap <leader>ct </<Esc>2F<lyiwf/pa><Esc>F<i
"auto close tag with empty line
inoremap <leader>cst </<Esc>2F<lyiwf/pa><Esc>F<i<CR><CR><Esc>kS
"markdown code - puts cursor in middle of ``` 
inoremap ``` ``````<esc>3ha<cr><cr><esc>kS<tab>
"}}}

" normal mode maps {{{

" capital J and K move 5 lines at a time
nnoremap J 5j
nnoremap K 5k

" join lines
nnoremap <leader>j J

" show search history
nnoremap <leader>/ q/

" source vimrc
nnoremap <leader>vs :so ~/.vim/vimrc<cr>

" add semi colon to end of line w/o losing location
nnoremap <leader>; mlA;<esc>`l 

" toggle search highlighting 
nnoremap <space><space> :set nohlsearch!<CR>

" resize editor window with arrow keys
nnoremap <Down>  :resize -2<CR>
nnoremap <Left>  :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>
nnoremap <Up>    :resize +2<CR>

" change pwd to directory of current file
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" toggle relative and non relative line number
nnoremap <space>r :set relativenumber!<CR>
nnoremap <space>n :set number!<CR>

" toggle between 2 files
nnoremap ,, :b#<CR>

" quit editor
noremap <leader>q :q<CR>

" add new line in normal mode
nnoremap go o<Esc>
nnoremap gO O<Esc>j

" j/k will move virtual lines (lines that wrap)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j') 
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" set Y to copy til end of line instead of y $
nnoremap Y y$
"}}}


" visual mode maps {{{
vnoremap J 5j
vnoremap K 5k

" don't exit selection when indenting/outdenting in visual mode
vnoremap > >gv
vnoremap < <gv
"}}}


" operator maps - HAVE TO ADD TO VSCODE when supported {{{

" using <c-u> to remove the range that vim may insert
" operators act on the vim range or when using <c-u>, the selected range

" delete around next word
onoremap anw :<c-u>normal! wvaw<cr>
" delete around next Word
onoremap anW :<c-u>normal! WvaW<cr>
" delete inner next word
onoremap inw :<c-u>normal! wviw<cr>
" delete inner next Word
onoremap inW :<c-u>normal! WviW<cr>

" around next bracket
onoremap an[ :<c-u>normal! f[va[<cr>
" around last bracket
onoremap al[ :<c-u>normal! F[va[<cr>
" inside next bracket
onoremap in[ :<c-u>normal! f[vi[<cr>
" inside last bracket
onoremap il[ :<c-u>normal! F[vi[<cr>

" around next bracket
onoremap an{ :<c-u>normal! f{va{<cr>
" around last bracket
onoremap al{ :<c-u>normal! F{va{<cr>
" inside next bracket
onoremap in{ :<c-u>normal! f{vi{<cr>
" inside last bracket
onoremap il{ :<c-u>normal! F{vi{<cr>

" around next parenthesis
onoremap an( :<c-u>normal! f(va(<cr>
" around last parenthesis
onoremap ap( :<c-u>normal! F(va(<cr>
" inside next parenthesis
onoremap in( :<c-u>normal! f(vi(<cr>
" inside last parenthesis
onoremap ip( :<c-u>normal! F(vi(<cr>

" around next single quote
onoremap an' :<c-u>normal! f'va'<cr>
" around last single quote
onoremap ap' :<c-u>normal! F'va'<cr>
" inside next single quote
onoremap in' :<c-u>normal! f'vi'<cr>
" inside last single quote
onoremap ip' :<c-u>normal! F'vi'<cr>

" around next double quote
onoremap an" :<c-u>normal! f"va"<cr>
" around last double quote
onoremap ap" :<c-u>normal! F"va"<cr>
" inside next double quote
onoremap in" :<c-u>normal! f"vi"<cr>
" inside last double quote
onoremap ip" :<c-u>normal! F"vi"<cr>

" }}}


" Make Alt work on Ubuntu {{{
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

set timeout ttimeoutlen=50
" }}}


" set alt keybindings for drag line below/above {{{
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
" }}}
